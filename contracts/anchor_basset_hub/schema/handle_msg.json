{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "anyOf": [
    {
      "description": "Owner's operations Set the owener",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "airdrop_registry_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bluna_token_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "rewards_dispatcher_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "stluna_token_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "validators_registry_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/String"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      }
    },
    {
      "description": "update the parameters that is needed for the contract",
      "type": "object",
      "required": [
        "update_params"
      ],
      "properties": {
        "update_params": {
          "type": "object",
          "properties": {
            "epoch_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "er_threshold": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "peg_recovery_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unbonding_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    },
    {
      "description": "User's operations Receives `amount` in underlying coin denom from sender. Delegate `amount` equally between validators from the registry. Issue `amount` / exchange_rate for the user.",
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "bond_for_st_luna"
      ],
      "properties": {
        "bond_for_st_luna": {
          "type": "object"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "bond_rewards"
      ],
      "properties": {
        "bond_rewards": {
          "type": "object"
        }
      }
    },
    {
      "description": "Update global index",
      "type": "object",
      "required": [
        "update_global_index"
      ],
      "properties": {
        "update_global_index": {
          "type": "object",
          "properties": {
            "airdrop_hooks": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        }
      }
    },
    {
      "description": "Send back unbonded coin to the user",
      "type": "object",
      "required": [
        "withdraw_unbonded"
      ],
      "properties": {
        "withdraw_unbonded": {
          "type": "object"
        }
      }
    },
    {
      "description": "Check whether the slashing has happened or not",
      "type": "object",
      "required": [
        "check_slashing"
      ],
      "properties": {
        "check_slashing": {
          "type": "object"
        }
      }
    },
    {
      "description": "bAsset's operations Receive interface for send token. Unbond the underlying coin denom. Burn the received basset token.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      }
    },
    {
      "description": "internal operations",
      "type": "object",
      "required": [
        "claim_airdrop"
      ],
      "properties": {
        "claim_airdrop": {
          "type": "object",
          "required": [
            "airdrop_contract",
            "airdrop_swap_contract",
            "airdrop_token_contract",
            "claim_msg",
            "swap_msg"
          ],
          "properties": {
            "airdrop_contract": {
              "$ref": "#/definitions/String"
            },
            "airdrop_swap_contract": {
              "$ref": "#/definitions/String"
            },
            "airdrop_token_contract": {
              "$ref": "#/definitions/String"
            },
            "claim_msg": {
              "$ref": "#/definitions/Binary"
            },
            "swap_msg": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      }
    },
    {
      "description": "Swaps claimed airdrop tokens to UST through Terraswap & sends resulting UST to bLuna Reward contract",
      "type": "object",
      "required": [
        "swap_hook"
      ],
      "properties": {
        "swap_hook": {
          "type": "object",
          "required": [
            "airdrop_swap_contract",
            "airdrop_token_contract",
            "swap_msg"
          ],
          "properties": {
            "airdrop_swap_contract": {
              "$ref": "#/definitions/String"
            },
            "airdrop_token_contract": {
              "$ref": "#/definitions/String"
            },
            "swap_msg": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "redelegate_proxy"
      ],
      "properties": {
        "redelegate_proxy": {
          "type": "object",
          "required": [
            "amount",
            "dst_validator",
            "src_validator"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "dst_validator": {
              "$ref": "#/definitions/String"
            },
            "src_validator": {
              "$ref": "#/definitions/String"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a HandleMsg",
      "type": "object",
      "required": [
        "amount",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "sender": {
          "$ref": "#/definitions/String"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
